RESTful Webservices

Project
	1) team and leaders
	2) Project titles
	3) Abstract

Spring REST:
-----------------
Yesterday, we have implemented RESTful webservices using Jersey

Spring REST
we can implement RESTful webservices using Spring framework.
Initially, Spring boot was not introduced, but Spring was there.

In that case, how to create a rest ful webservice using spring.	(NOT SPRING BOOT)

How spring rest works?
	similar to spring mvc.	
		similar in the sense
			disptacher servlet should be configured		specify the path which the dispatcher servlet should intercept
			view resolver				specify the base package

1) create a dynamic web project
	jun18-spring-rest-1
2) convert it into maven project
	configure -> convert to maven project
3) in pom.xml
			<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.6</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.3.9.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>4.3.9.RELEASE</version>
		</dependency>
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

4) in web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xmlns="https://java.sun.com/xml/ns/javaee" xsi:schemaLocation="https://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>spring-mvc-example</display-name>

	<!-- Add Spring MVC DispatcherServlet as front controller -->
	<servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>
                org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <init-param>
       		<param-name>contextConfigLocation</param-name>
       		<param-value>/WEB-INF/spring-servlet.xml</param-value>
    		</init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
 
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern> 
    </servlet-mapping>
    
 </web-app>

5) under WEB-INF folder 
	create spring-servlet.xml

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	<context:component-scan base-package="com.wipro.hrms" />


</beans>

6) Create the controller class
	@RestController

	write couple of GetMappings and check


Task:
------
create a rest api using Spring framework (not spring boot)
follow the steps given in chat
and implement it.
hello
hi


--------------------------------------------------------
Kindly open the link given in chat window
	https://docs.google.com/spreadsheets/d/1fSlpzJjA0cLYycilY1D43qo7L8RdM4H9VOT8C4fpn34/edit?usp=sharing

and update the 
	leader
	title

1) Team formation
2) Leader selection
3) Title selection
4) Abstract creation
	create a google docs
		word document online
	https://docs.google.com/document/u/0/


---------------------------------------------------------------------------------

We have created a spring REST api (not spring boot)

spring rest api
	CRUD

https://github.com/jagasia/jun17-jersey-rest-1
	take the dao code from above git

and complete the curd operations in spring rest
test it in postman

1) pom.xml
	add the hibernate dependencies
2) in src
	hibernate.cfg.xml
3) copy the
	Employee.java
	EmployeeDao.java
	EmployeeDaoImp.java

	along with the package 
		base package is same for both projects
4) @Component annotation above the 
	EmployeeDaoImpl class

5) Create a controller
	EmployeeController
		autowire the dao (interface)

6) create CRUD related
	mappings
		GET, POST, PUT, DELETE

7) test them in post man

----------------------------
In spring boot rest api:
	when it comes to spring boot,
		we should use JpaRepository

in our previous example, we used 
	Hibernate 

@EnableWebMvc is equivalent to <mvc:annotation-driven /> in XML


Spring we have used hibernate
but in spring boot, we cannot use
	hibernate
	hibernate template
we can use 
	JpaRepository
		it is a kind of hibernate only

Spring boot REST API:
-------------------------------
Task:
	Create a spring boot application
		spring web dependency
	Add a controller in the base package or its sub package
	use @RestController
	create a hello world with get mapping

	run the project and tell me


Demo:
1) create a spring boot app using 
	spring initializr
		in sts -> file -> new ->spring starter project
2) add a class under base package or its sub package
3) use @RestController annotation on the class
4) create a @GetMapping
	and return "Hello world" from a method
5) right click the project and
	run as "Spring boot app"
6) note the port number from the console and 
	go to browser
		http://localhost:8080

------------------------------------------------------------
Food is the entity
Customer is an entity
Order is an entity
Restaurant is an entity

We will create a rest api for food

for each entity, we can create a separate REST api

all projects have same group id
but different artifact id

package names same as group id
so that when we integrate, they will still hold fine

multiple rest apis can interact with each other
	using Feign client

Spring boot MVC project
	will be the front end
	from that mvc project, we can call rest apis using Feign client

Lets create a REST API for one entity
	Food
1) create a spring boot app 
	jun18-food-rest-1
		spring web
		spring data jpa		
		mysql driver

2) go to application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/wipro3
spring.datasource.username=root
spring.datasource.password=

spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=12
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

spring.jpa.show-sql= true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false
spring.jpa.properties.hibernate.format_sql = false
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE


3) create the entity class
	right click the base package and create a class
		under sub package .entity
package com.wirpo.hrms.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "Food")
public class Food {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	private String name;
	private Float price;
	
	public Food() {}

	public Food(Integer id, String name, Float price) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Float getPrice() {
		return price;
	}

	public void setPrice(Float price) {
		this.price = price;
	}

	@Override
	public String toString() {
		return "Food [id=" + id + ", name=" + name + ", price=" + price + "]";
	}
	
	
}

4) create the repository interface
package com.wirpo.hrms.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.wirpo.hrms.entity.Food;

@Repository
public interface FoodRepository extends JpaRepository<Food, Integer>
{
	List<Food> findByName(String name);
	
	@Query("select f from Food f where f.name like %:name%")
	List<Food> findFoodLikeName(@Param("name") String name);
	
}



5) create a service class
package com.wirpo.hrms.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wirpo.hrms.entity.Food;
import com.wirpo.hrms.repository.FoodRepository;

@Service
public class FoodService {
	@Autowired
	private FoodRepository fr;
	
	public Food create(Food food) {
		return fr.save(food);
	}
	public List<Food> read() {
		return fr.findAll();
	}
	public Food read(Integer id) {
		Optional<Food> temp = fr.findById(id);
		Food f=null;
		if(temp.isPresent())
		{
			f=temp.get();
		}
		return f;
	}
	public Food update(Food food) {
		return fr.save(food);
	}
	public Food delete(Integer id) {
		Food f = null;
		f=read(id);
		if(f!=null)
		{
			fr.delete(f);
		}
		return f;
	}
	
	public List<Food> findByFoodName(String name)
	{
		//how to find all the food items by their name?
		return fr.findByName(name);
	}
	
	public List<Food> findLikeName(String name)
	{
		return fr.findFoodLikeName(name);
	}
}



6) create the rest controller
package com.wirpo.hrms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.wirpo.hrms.entity.Food;
import com.wirpo.hrms.service.FoodService;

@RestController
@RequestMapping("/food")
public class FoodController {
	@Autowired
	private FoodService fs;
	
	@GetMapping
	public List<Food> retrieveAllFoods()
	{
		return fs.read();
	}
	
	@GetMapping("/{id}")
	public Food findFoodById(@PathVariable("id") Integer id)
	{
		return fs.read(id);
	}
	
	@PostMapping
	public Food addFood(@RequestBody Food food)
	{
		return fs.create(food);
	}
	
	@PutMapping
	public Food modifyFood(@RequestBody Food food)
	{
		return fs.update(food);
	}
	
	@DeleteMapping("/{id}")
	public Food deleteFood(@PathVariable("id") Integer id)
	{
		return fs.delete(id);
	}
	
	@GetMapping("/name/{name}")
	public List<Food> findFoodByName(@PathVariable("name") String name)
	{
		return fs.findLikeName(name);
	}
}




7) find food by free text search





