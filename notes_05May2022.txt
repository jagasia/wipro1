So far, we have learnt
Spring Core
Spring AOP
Spring MVC
Spring data JPA

Today, we are going to learn spring REST.

before that, if you have any doubts in any of these above modules, you can ask.

entity: Employee
	id
	firstName
	lastName
	salary

with only the above details, you should be able to create
	i) spring boot mvc project
	ii) use spring data jpa
	iii) create entity class "Employee"
	iv) create repository interface "EmployeeRepository"
	v) create service class "EmployeeService"
	vi) create controller class "EmployeeController"
	viii) create jsp file "employee.jsp"
	


server.port=5000

Today we learn to use validations
JSR 349 validation
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.13.Final</version>
		</dependency>


in entity class, use validation annotations
	@NotBlank	
	@NotEmpty
	@Size
	@Min
	@Max


in controller, when we receive the entity object as model attribute, use @Valid annotation to validate
	use BindingResult as last argument of the method
-----------------------------------------------------------------------------------------

Spring REST
----------------
What is REST?
	REpresentational State Transfer.

2001
	web services introduced

	made possible for a program created in any language or any platform runs somewhere in the world, but can be accessed from anywhere using any program running in any platform.

	interoperability

if you remember, when we learnt angular, we accessed some of the REST apis in the market.

Flights/ Airlines
	this REST api was created by someone anywhere in the world.


Web service can be 2 types:
	SOAP	(or) 	REST

SOAP
	Simple Object Access Protocol

if you soap web service, a single URL is used to represent the entire web service.
the webservice may have several web methods, but since there is only 1 URL for entire service, that does not favor microservices architecture.

in microservices architecture, every service (web method) must be represented by a different URL. so that we offer only a micro/ small unit of code to the user.

In REST api, every web method has a separate URL. 

SOAP is a protocol			REST is an architectural style

Task:
	Identify the difference between SOAP and REST

RESTful webservices 
	can be implemented using many frameworks
		i) Jersey framework
		ii) Spring framework
		iii) Ruby on Rails


Spring boot REST
	is very easy implementation for RESTful web services

1) create a spring boot application
	go to 
		start.spring.io
	
			group id, artifact id, java version, maven/gradle, jar/war
		choose jar
		choose maven
		
	dependencies?
		spring web

2) create a controller
	@RestController

		yes, rest controller. Did you use @Controller annotation in MVC project?
		we use @RestController annotation in RESTful webservices.

What is the difference between @Controller and @RestController?
	@RestController = @Controller + @ResponseBody

every method returns content (NOT the view name)
means,
	if i say
		return "index";		
	it does not mean "index.jsp". It means, "index" is printed in the browser as content.

lets create our first REST api now

1) File -> New -> Spring Starter Project
	may05-rest-1
	java
	maven
	com.wipro.hrms
	may05-rest-1
	jar/war?		jar

2) choose dependencies
	spring web

3) finish

4) rightclick the base package 	(where, the application java file is present, that is the base package)
	create new class
		put the class inside "controller" sub package
		name of the class:	MyController


package com.wipro.hrms.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MyController {

	@GetMapping("/")
	public String home()
	{
		return "Hello world";
	}
}


------------------------------------
Task:
Create a rest api	"may05-rest-01"
when i check the browser 
	localhost:8080

i should see "welcome to our rest api"


if 8080 is not available, it is already occupied by some other process, 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.



Solution:
go to cmd
	netstat -aon

right click task bar, go to task manager
	if PID is not visible, right click the column name, choose PID
find the process with that particular PID and end task



What is @GetMapping?
	@GetMapping("/")
		This is similar to 
			@RequestMapping(method="GET", value="/")

What are the http methods that can be used in RESTful webservices?
	GET		is used when we want to retrieve values from the services		read, read(id)
	POST		is used when we want to store some information	(we send data. that must be secured)
	PUT		is used when we want to update the existing information
	DELETE		is used when we want to delete the existing information
	PATCH		is used when we want to update only few of the information

GET is not secure because, it will show the query strings (url rewriting) in the browser's address bar.
	we dont need to worry about that when we retrieve the content (not that we send the content)
	
GET		read, read(id)
POST		create
PUT		update
DELETE		delete
PATCH		some of the columns of the table being updated. NOT the entire row

the problem is, the browser allows only to access GET mapping using the address bar.
In our MVC, project, we have use ONLY 	GET & POST mappings

POST was done by submitting a form. POST mapping url cannot be entered in the browser's address bar.

how about PUT and DELETE mappings?

to test, All HTTP methods, we need POSTMAN or Swagger.

Task:
	Download POSTMAN and inform me
	Install POSTMAN and inform me


----------------------------------------------
We created an entity called employee.
Lets create an employee-service

When i say microservices, i will create a separate service for every independent entity

for employee, i will create a rest api

1) create a spring boot project
2) add dependencies 
	spring web
	spring data jpa
	mysql driver
3) in application.properties


server.port=8383

spring.datasource.url=jdbc:mysql://localhost:3306/wipro3
spring.datasource.username=root
spring.datasource.password=

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.id.new_generator_mappings = false
#spring.jpa.properties.hibernate.format_sql = false
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

4) entity
5) repository
6) service
7) controller


entity:
package com.wipro.hrms.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	private String firstName;
	private String lastName;
	private String salary;
	
	public Employee() {}

	public Employee(Integer id, String firstName, String lastName, String salary) {
		super();
		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.salary = salary;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getSalary() {
		return salary;
	}

	public void setSalary(String salary) {
		this.salary = salary;
	}
	
	
}


--------------------------
repository

package com.wipro.hrms.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.wipro.hrms.entity.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Integer>
{

}

-------------------------------------------
service



package com.wipro.hrms.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wipro.hrms.entity.Employee;
import com.wipro.hrms.repository.EmployeeRepository;

@Service
public class EmployeeService {
	@Autowired
	private EmployeeRepository er;
	
	public Employee create(Employee employee) {
		return er.save(employee);
	}
	public List<Employee> read() {
		return er.findAll();
	}
	public Employee read(Integer id) {
		Optional<Employee> x = er.findById(id);
		Employee employee=null;
		if(x.isPresent())
		{
			employee=x.get();
		}
		return employee;
	}
	public Employee update(Employee employee) {
		Employee e=null;
		if(read(employee.getId())!=null)
		{
			er.save(employee);
			e=employee;
		}
		return e;
	}
	public Employee delete(Integer id) {
		Employee e=read(id);
		if(e!=null)
		{
			er.delete(e);
			
		}
		return e;
	}
	
}


-----------------------------------
controller


package com.wipro.hrms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.wipro.hrms.entity.Employee;
import com.wipro.hrms.service.EmployeeService;

@RestController
public class EmployeeController {
	@Autowired
	private EmployeeService es;
	
	@PostMapping("/employee")
	public Employee addEmployee(@RequestBody Employee employee) {
		return es.create(employee);
	}
	
	@GetMapping("/employee")
	public List<Employee> retrieveEmployees() {
		return es.read();
	}
	
	@GetMapping("/employee/{id}")
	public Employee findEmployeeById(@PathVariable("id") Integer id) {
		return es.read(id);
	}
	
	@PutMapping("/employee")
	public Employee updateEmployee(@RequestBody Employee employee) {
		return es.update(employee);
	}
	
	@DeleteMapping("/employee/{id}")
	public Employee deleteEmployee(@PathVariable("id") Integer id) {
		return es.delete(id);
	}
	
}




